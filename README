1. Quick Start

To quickly compile a product variant for Crimson, you can try the following
commands. Note carefully that they are used for our own, internal, machines, and
may not work for you. The remainder of this README provides additional
information on how to get a compile working for you.

1.a Quickstart Compile Routines

The following commands are quick start commands to enable cross compiling of
firmware from an x86_64 host to the arm computer.

1.a.i Crimson Optimized Compile Commands

   sed -i 's/DTATE/DVAUNT/g' configure.ac #Optional, clean git repo defaults to Vaunt.

   sh autogen.sh

   CXX="/usr/bin/arm-unknown-linux-gnueabihf-g++" \
   CC="/usr/bin/arm-unknown-linux-gnueabihf-gcc" \
   CFLAGS="-Wall -O3 -pipe -fomit-frame-pointer -Wall \
        -march=armv7-a -mtune=cortex-a9 -mfpu=neon" \
   CPPFLAGS="" \
   CXXFLAGS="" \
        ./configure --prefix=/usr --host=x86_64

   make

1.a.ii Cyan Optimized Compile Commands

   # When compiling cyan, use the master-testing branch.
   sed -i 's/DVAUNT/DTATE/g' configure.ac

   sh autogen.sh

   CXX="/usr/bin/arm-linux-gnueabi-g++" \
   CC="/usr/bin/arm-linux-gnueabi-gcc" \
   CFLAGS="-Wall -O3 -pipe -fomit-frame-pointer -Wall \
        -march=armv8-a -mtune=cortex-a53 -mfpu=neon" \
   CPPFLAGS="" \
   CXXFLAGS="" \
        ./configure --prefix=/usr --host=x86_64
    
    make

2. Specifying Build Variant Target

To specify whether to build a Cyan ("Tate") or Crimson ("Vaunt") server variant
you will need to modify a CFLAG that is specified in the configure.ac file.

This flag modifies specific properties, such as the number of front end boards,
and register file mappings to ensure operation. By default, firmware targets
Crimson ("Vaunt") product variants.

To modify and build the Cyan "Tate", variant, you will need to modify the
configure.ac file. Locate the line that specifies, "CFLAG+=" -DVAUNT",
and comment that line out. Then uncomment the following line, "CFLAG+=" -DTATE"

You may also use sed to accomplish this same task.

Only one flag may be specified at a time, and you must specify one of them for
compilation to succeed.

3. Compiling the sources

3a. Cross-Compiling from a development computer

To build the HPS binaries from a host computer, you may be required to specify
a non-standard location for your compiler and build chain. To ensure that your
modified build chain is correctly specified and propagated across the build, you
may specify the specific compiler as a configure flag.

To target the ARM processors used by Crimson and Tate, you can use;

./configure \
    --prefix=/usr \
    --host=x86_64

It's likely that your default system toolchain will not immediately support the
target arm host. If that's the case, you can choose to directly specify the
compiler using the CC and CXX flags.

For the internal PV machines, we require the use of the "arm-linux-gnueabihf-gcc" 
toolchain, to target crimson, and we use the linaro gcc for cyan.

   CXX="/usr/bin/arm-unknown-linux-gnueabihf-g++"
   CC="/usr/bin/arm-unknown-linux-gnueabihf-gcc"

3b. Compiling on the Device

To compile from the device, simply copy over all the sources, and then compile
as follows;


   sed -i 's/DTATE/DVAUNT/g' configure.ac #Optional, clean git repo defaults to Vaunt.
   # To compile Cyan, comment the above line, and uncomment the two lines below;
   # git checkout master-testing
   # sed -i 's/DVAUNT/DTATE/g' configure.ac

   sh autogen.sh

   # Update --host flag to arm-linux-gnueabi-g++
   CFLAGS="-Wall -O3 -pipe -fomit-frame-pointer -Wall \
        -march=armv7-a -mtune=cortex-a9 -mfpu=neon" \
   CPPFLAGS="" \
   CXXFLAGS="" \
        ./configure --prefix=/usr

   make

4. Compile Optimizations

To further optimize the design for either Crimson or Cyan, you can also specify
the CFLAGs when calling configure.

For Crimson (Vaunt), the following CFLAGS and configure flags have been tested;

CFLAGS="-Wall -O3 -pipe -fomit-frame-pointer -Wall \
        -march=armv7-a -mtune=cortex-a9 -mfpu=neon" \
CPPFLAGS="" \
CXXFLAGS="" \      
	./configure --prefix=/usr --host=x86_64

For Cyan (Tate), the following CFLAGS and configure flags have been tested;

CFLAGS="-Wall -O3 -pipe -fomit-frame-pointer -Wall \
        -march=armv7-a -mtune=cortex-a53 -mfpu=neon" \
CPPFLAGS="" \
CXXFLAGS="" \
        ./configure --prefix=/usr --host=x86_64


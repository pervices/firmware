#!/usr/bin/tclsh

source /usr/bin/gpio_control

#####################
# Variables         #
#####################
#16 boards indexed from 0
set ::MAX_BOARD 15
set ::MAX_TIMEOUT 60

#####################
# Helper Functions  #
#####################

proc print_help { } { 
    puts "Enable and disable Radio Front-End boards"
    puts "Arguments:"
    puts "    rfe_control <board_number> <on|off|check> < |n(oconfirm)|timeout>"
    puts ""
    puts "    <board_number>: 0..$::MAX_BOARD"
    puts "        This is the board number in the digital board."
    puts "    <on/off/check>:"
    puts "        Turn the RFE on or off, or check it's state without changing state."
    puts "    < |n(oconfirm)|timeout>:"
    puts "        Leave blank for no timeout (infinite wait)."
    puts "        n or noconfirm to avoid checking board state."
    puts "        0..$::MAX_TIMEOUT to specify timeout in seconds."
    puts ""
}

proc check_2inputs { board_number board_state } {
    if { $board_number < 0 || $board_number > $::MAX_BOARD } {
        puts "Unsupported board number."
        print_help
        exit
    }
    if { ![string equal $board_state "on"] && ![string equal $board_state "off"]  && ![string equal $board_state "check"] } {
        puts "Unsupported board state."
        print_help
        exit
    }
}

proc check_3inputs { board_number board_state timeout} {
    if { $board_number < 0 || $board_number > $::MAX_BOARD } {
        puts "Unsupported board number."
        print_help
        exit
    }
    if { ![string equal $board_state "on"] && ![string equal $board_state "off"]  && ![string equal $board_state "check"] } {
        puts "Unsupported board state."
        print_help
        exit
    }
    if { $timeout < 0 || $timeout > $::MAX_TIMEOUT } {
        puts "Unsupported timeout."
        print_help
        exit
    }
}
#
#####################
# Main Function     #
#####################
if {$::argv0 eq [info script]} {
    set board_number 0
    set board_state off


    if { $::argc == 2 } {
        set board_number [lindex $::argv 0]
        set board_state [lindex $::argv 1]
        set confirm 1
        set timeout -1
    
        # Check validity of inputs
        check_2inputs $board_number $board_state
    } elseif { $::argc == 3 } {
        set board_number [lindex $::argv 0]
        set board_state [lindex $::argv 1]
        set arg3 [lindex $::argv 2]

        if { ![string equal $arg3 "n"] && ![string equal $arg3 "noconfirm"] } {
            if { [string is integer -strict $arg3] } {
                set confirm 1
                set timeout $arg3
            } else {
                puts "Unsupported 3rd argument"
                print_help
                exit
            }
        } else {
            set confirm 0
            set timeout 0
        }

        # Check validity of inputs
        check_3inputs $board_number $board_state $timeout
    } else {
        puts "Invalid Arguments"
        print_help
        exit
    
    }

    set gpio_chip_label_pwr_en "bp_pwr"
    set gpio_chip_label_board_good "bp_bg"

    # The rfe control signals are not mapped one-to-one to the PCA9539 GPIO pins, therefore
    # the following table is used to correctly map an rfe control to it's GPIO pin.
    # For more information, see the backplane's schematic.
    set board_to_gpio_map_pwr_en [list 2 1 0 14 3 4 5 6 8 12 7 13 11 9 10 15]
    set board_to_gpio_map_board_good [list 6 7 8 15 5 4 3 2 10 14 1 12 11 0 13 9]

    # GPIO pin number that connects to Enable signal for this board
    set gpio_chip_number_pwr_en 0
    set en_gpio_pin_number [lindex $board_to_gpio_map_pwr_en $board_number]

    # GPIO pin number that connects to BoardGood signal for this board
    set gpio_chip_number_board_good 0
    set bg_gpio_pin_number [lindex $board_to_gpio_map_board_good $board_number]

    # Run main gpio code
    set en_gpio_file [get_gpio_file $gpio_chip_label_pwr_en $gpio_chip_number_pwr_en $en_gpio_pin_number]
    set bg_gpio_file [get_gpio_file $gpio_chip_label_board_good $gpio_chip_number_board_good $bg_gpio_pin_number]

    if { [string equal $board_state "check"] } {
        set board_good [gpio_in $bg_gpio_file]
        if { $board_good == 1} {
                puts "Board $board_number is on"
            } else {
                puts "Board $board_number is off"
            }
        exit
    }

    if { [string equal $board_state "on"] } {
        set_gpio_direction $en_gpio_file "high"

    } elseif { [string equal $board_state "off"] } {
        set_gpio_direction $en_gpio_file "low"
    }

    if { $confirm } {
        if { $timeout >= 0 } {
            set starttime [clock seconds]
        }
        after 10
        set board_good [gpio_in $bg_gpio_file]

        if { [string equal $board_state "off"] } {
            while { $board_good == 1 } {
            after 10
                set board_good [gpio_in $bg_gpio_file]
                if { $timeout >= 0 } {
                    set curtime [clock seconds]
                    set duration [expr $curtime - $starttime]
                    if { $duration >= $timeout } {
                        puts "ERROR: Board $board_number is still powered on"
                        exit
                    }
                }
            }
            puts "Board $board_number successfully powered off"
        } elseif { [string equal $board_state "on"] } {
            while { $board_good == 0 } {
                after 10
                set board_good [gpio_in $bg_gpio_file]
                if { $timeout >= 0 } {
                    set curtime [clock seconds]
                    set duration [expr $curtime - $starttime]
                    if { $duration >= $timeout } {
                        puts "ERROR: Board $board_number is still powered off"
                        exit
                    }
                }
            }
            puts "Board $board_number successfully powered on"
        }
    }
}
